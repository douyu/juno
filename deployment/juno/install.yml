---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: adminer
  name: adminer
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: adminer
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: broker
  name: broker
spec:
  ports:
    - name: "10909"
      port: 10909
      targetPort: 10909
    - name: "10911"
      port: 10911
      targetPort: 10911
    - name: "10912"
      port: 10912
      targetPort: 10912
  selector:
    io.kompose.service: broker
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: db
  name: db
spec:
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
  selector:
    io.kompose.service: db
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: etcd
  name: etcd
spec:
  ports:
    - name: "2379"
      port: 2379
      targetPort: 2379
    - name: "2380"
      port: 2380
      targetPort: 2380
    - name: "4001"
      port: 4001
      targetPort: 4001
  selector:
    io.kompose.service: etcd
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: grafana
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: pyroscope
  name: pyroscope
spec:
  ports:
    - name: "4040"
      port: 4040
      targetPort: 4040
  selector:
    io.kompose.service: pyroscope
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: jaeger
  name: jaeger
spec:
  ports:
    - name: "16686"
      port: 16686
      targetPort: 16686
    - name: "14268"
      port: 14268
      targetPort: 14268
    - name: "14269"
      port: 14269
      targetPort: 14269
    - name: "14250"
      port: 14250
      targetPort: 14250
    - name: "9411"
      port: 9411
      targetPort: 9411
    - name: "5778"
      port: 5778
      targetPort: 5778
    - name: "5775"
      port: 5775
      protocol: UDP
      targetPort: 5775
    - name: "6831"
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: "6832"
      port: 6832
      protocol: UDP
      targetPort: 6832
  selector:
    io.kompose.service: jaeger
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.image-pull-policy: Always
    kompose.version: 1.28.0 (HEAD)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: juno-admin
  name: juno-admin
spec:
  ports:
    - name: "50002"
      port: 50002
      targetPort: 50002
    - name: "50004"
      port: 50004
      targetPort: 50004
  selector:
    io.kompose.service: juno-admin
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: juno-agent
  name: juno-agent
spec:
  ports:
    - name: "50010"
      port: 50010
      targetPort: 50010
  selector:
    io.kompose.service: juno-agent
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: mqconsole
  name: mqconsole
spec:
  ports:
    - name: "19876"
      port: 19876
      targetPort: 8080
  selector:
    io.kompose.service: mqconsole
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: namesrv
  name: namesrv
spec:
  ports:
    - name: "9876"
      port: 9876
      targetPort: 9876
  selector:
    io.kompose.service: namesrv
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
  selector:
    io.kompose.service: prometheus
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    io.kompose.service: redis
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: adminer
  name: adminer
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: adminer
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: adminer
    spec:
      containers:
        - image: adminer:4.8.1
          name: adminer
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: deployment-default
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/deployment-default: "true"
  podSelector:
    matchLabels:
      io.kompose.network/deployment-default: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: broker
  name: broker
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: broker
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
        kompose.volume.type: configMap
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: broker
    spec:
      containers:
        - args:
            - sh
            - mqbroker
            - -n
            - namesrv:9876
            - -c
            - ../conf/broker.conf
          env:
            - name: JAVA_OPT_EXT
              value: -Xmx256m -Xms256m -Xmn128m
          image: apacherocketmq/rocketmq:4.5.0
          name: broker
          ports:
            - containerPort: 10909
            - containerPort: 10911
            - containerPort: 10912
          resources: {}
          volumeMounts:
            - mountPath: /home/rocketmq/rocketmq-4.5.0/conf/broker.conf
              name: broker-cm0
              subPath: broker.conf
      restartPolicy: Always
      volumes:
        - configMap:
            items:
              - key: broker.conf
                path: broker.conf
            name: broker-cm0
          name: broker-cm0
status: {}

---
apiVersion: v1
data:
  broker.conf: |
    brokerClusterName = DefaultCluster
    brokerName = broker-a
    brokerId = 0
    deleteWhen = 04
    autoCreateTopicEnable = true
    fileReservedTime = 48
    brokerRole = ASYNC_MASTER
    flushDiskType = ASYNC_FLUSH
    #set `brokerIP1` if you want to set physical IP as broker IP.
    # brokerIP1=127.0.0.1
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  creationTimestamp: null
  labels:
    io.kompose.service: broker
  name: broker-cm0

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: db
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: db
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
        kompose.volume.type: configMap
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: db
    spec:
      containers:
        - args:
            - --default-authentication-plugin=mysql_native_password
          env:
            - name: MYSQL_ROOT_HOST
              value: '%'
            - name: MYSQL_ROOT_PASSWORD
              value: root
          image: mysql:5.7
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -u
                - root
                - -proot
            failureThreshold: 10
            timeoutSeconds: 20
          name: db
          ports:
            - containerPort: 3306
          resources: {}
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d
              name: db-cm0
      restartPolicy: Always
      volumes:
        - configMap:
            name: db-cm0
          name:  db-cm0
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: etcd
  name: etcd
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: etcd
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: etcd
    spec:
      containers:
        - env:
            - name: ALLOW_NONE_AUTHENTICATION
              value: "yes"
            - name: ETCDCTL_API
              value: "3"
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: http://0.0.0.0:2379
            - name: ETCD_LISTEN_CLIENT_URLS
              value: http://0.0.0.0:2379
          image: quay.io/coreos/etcd:v3.3
          name: etcd
          ports:
            - containerPort: 2379
            - containerPort: 2380
            - containerPort: 4001
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: grafana
    spec:
      containers:
        - image: grafana/grafana:9.3.6
          name: grafana
          ports:
            - containerPort: 3000
          resources: {}
          volumeMounts:
            - mountPath: /etc/grafana/grafana.ini
              name: juno-admin-cm0
              subPath: grafana.ini 
      restartPolicy: Always
      volumes:
        - configMap:
            items:
              - key: juno-grafana.ini
                path: grafana.ini
            name: juno-admin-cm0
          name: juno-admin-cm0  
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: pyroscope
  name: pyroscope
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: pyroscope
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: pyroscope
    spec:
      containers:
        - image: docker.io/pyroscope/pyroscope:0.37.2
          name: pyroscope
          ports:
            - containerPort: 4040
          resources: {}
          args:
            - "server" 
            - "-config"
            - "/etc/pyroscope/server.yml"
          volumeMounts:
            - mountPath: /etc/pyroscope/server.yml
              name: pyroscope-cm0
              subPath: server.yml
            - name: shared-data
              mountPath: /home/www/system/prometheus/  
        - env:
          - name: ENV
            value: dev
          - name: JUNO_HOST
            value: juno-agent-pyroscope
          - name: REGION_CODE
            value: cn-wuhan
          - name: REGION_NAME
            value: 武汉
          - name: ZONE_CODE
            value: cn-wuhan-guanggu-f1
          - name: ZONE_NAME
            value: 武汉光谷F1区
          image: ghcr.io/douyu/juno-agent:latest
          name: juno-agent
          ports:
            - containerPort: 50010
          resources: {}
          volumeMounts:
            - name: shared-data
              mountPath: /home/www/system/prometheus/
            - mountPath: /app/config
              name: juno-agent-cm0              
      restartPolicy: Always
      volumes:
        - configMap:
            items:
              - key: server.yml
                path: server.yml
            name: pyroscope-cm0
          name: pyroscope-cm0
        - configMap:
            name: juno-agent-cm0
          name: juno-agent-cm0
        - name: shared-data
          emptyDir: {}
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: jaeger
  name: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: jaeger
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: jaeger
    spec:
      containers:
        - env:
            - name: COLLECTOR_ZIPKIN_HOST_PORT
              value: :9411
            - name: QUERY_BASE_PATH
              value: /proxy/jaeger  
          image: jaegertracing/all-in-one:1.42
          name: jaeger
          ports:
            - containerPort: 16686
            - containerPort: 14268
            - containerPort: 14269
            - containerPort: 14250
            - containerPort: 9411
            - containerPort: 5778
            - containerPort: 5775
              protocol: UDP
            - containerPort: 6831
              protocol: UDP
            - containerPort: 6832
              protocol: UDP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.image-pull-policy: Always
    kompose.version: 1.28.0 (HEAD)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: juno-admin
  name: juno-admin
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: juno-admin
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.image-pull-policy: Always
        kompose.version: 1.28.0 (HEAD)
        kompose.volume.type: configMap
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: juno-admin
        appName: juno-admin
        runEnv: dev
    spec:
      containers:
        - image: ghcr.io/douyu/juno-admin:latest
          imagePullPolicy: Always
          name: juno-admin
          ports:
            - containerPort: 50002
            - containerPort: 50004
          resources: {}
          volumeMounts:
            - mountPath: /root/juno/config
              name: juno-admin-cm0
      restartPolicy: Always
      volumes:
        - configMap:
            name: juno-admin-cm0
          name: juno-admin-cm0
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: juno-agent
  name: juno-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: juno-agent
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
        kompose.volume.type: configMap
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: juno-agent
    spec:
      containers:
        - env:
            - name: ENV
              value: dev
            - name: JUNO_HOST
              value: juno-agent-dev01
            - name: REGION_CODE
              value: cn-wuhan
            - name: REGION_NAME
              value: 武汉
            - name: ZONE_CODE
              value: cn-wuhan-guanggu-f1
            - name: ZONE_NAME
              value: 武汉光谷F1区
          image: ghcr.io/douyu/juno-agent:latest
          name: juno-agent
          ports:
            - containerPort: 50010
          resources: {}
          volumeMounts:
            - mountPath: /app/config
              name: juno-agent-cm0
      restartPolicy: Always
      volumes:
        - configMap:
            name: juno-agent-cm0
          name: juno-agent-cm0
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: mqconsole
  name: mqconsole
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mqconsole
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: mqconsole
    spec:
      containers:
        - env:
            - name: JAVA_OPTS
              value: -Drocketmq.namesrv.addr=namesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=falses
            - name: JAVA_OPT_EXT
              value: -Xmx256m -Xms256m -Xmn128m
          image: apacherocketmq/rocketmq-dashboard:1.0.0
          name: mqconsole
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: namesrv
  name: namesrv
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: namesrv
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: namesrv
    spec:
      containers:
        - args:
            - sh
            - mqnamesrv
          env:
            - name: JAVA_OPT_EXT
              value: -Xmx256m -Xms256m -Xmn128m
          image: apacherocketmq/rocketmq:4.5.0
          name: namesrv
          ports:
            - containerPort: 9876
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
    kompose.volume.type: configMap
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: prometheus
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
        kompose.volume.type: configMap
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: prometheus
    spec:
      containers:
        - image: prom/prometheus:v2.42.0
          name: prometheus
          ports:
            - containerPort: 9090
          resources: {}
          volumeMounts:
            - name: shared-data
              mountPath: /home/www/system/prometheus/
            - mountPath: /etc/prometheus/prometheus.yml
              name: prometheus-cm0
              subPath: prometheus.yml
        - env:
            - name: ENV
              value: dev
            - name: JUNO_HOST
              value: juno-agent-prometheus
            - name: REGION_CODE
              value: cn-wuhan
            - name: REGION_NAME
              value: 武汉
            - name: ZONE_CODE
              value: cn-wuhan-guanggu-f1
            - name: ZONE_NAME
              value: 武汉光谷F1区
          image: ghcr.io/douyu/juno-agent:latest
          name: juno-agent
          ports:
            - containerPort: 50010
          resources: {}
          volumeMounts:
            - name: shared-data
              mountPath: /home/www/system/prometheus/
            - mountPath: /app/config
              name: juno-agent-cm0      
      restartPolicy: Always
      volumes:
        - configMap:
            items:
              - key: juno-prometheus.yml
                path: prometheus.yml
            name: prometheus-cm0
          name: prometheus-cm0
        - configMap:
            name: juno-agent-cm0
          name: juno-agent-cm0
        - name: shared-data
          emptyDir: {}  
status: {}

---
apiVersion: v1
data:
  juno-prometheus.yml: |
    global:
      scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
    scrape_configs:
        # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
        - job_name: "prometheus"

          # metrics_path defaults to '/metrics'
          # scheme defaults to 'http'.

          static_configs:
            - targets: ["localhost:9090"]

        - job_name: "node"
          file_sd_configs:
            - refresh_interval: 1m
              files:
                - "/home/www/system/prometheus/conf/*.yml"
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  creationTimestamp: null
  labels:
    io.kompose.service: prometheus
  name: prometheus-cm0

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f deployment/docker-compose.yml -o deployment/install.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/deployment-default: "true"
        io.kompose.service: redis
    spec:
      containers:
        - args:
            - redis-server
          image: redis:6.2-alpine
          name: redis
          ports:
            - containerPort: 6379
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---  
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bind-pod-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pod-reader
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default